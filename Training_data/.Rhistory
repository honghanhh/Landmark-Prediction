table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
print("at value of gamma and cost = ")
print(g)
print(c)
#print(table.svm)
print(table1)
print("end")
}
}
svm.model <- svm(svm.form,kernel="radial",gamma=0.1,cost=0.1, data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
trainData <- trainData1[,c("X","Y","isLandmark","Distance","UP","DOWN","LEFT","RIGHT","SURFfeature1","SURFfeature2","SURFfeature3","SURFfeature4","SURFfeature5","SURFfeature6",
"SURFfeature7","SURFfeature8","SURFfeature9","SURFfeature10","SURFfeature11","SURFfeature12","SURFfeature13",
"SURFfeature14","SURFfeature15","SURFfeature16","SURFfeature17","SURFfeature18","SURFfeature19","SURFfeature20",
"SURFfeature21","SURFfeature22","SURFfeature23","SURFfeature24","SURFfeature25","SURFfeature26","SURFfeature27",
"SURFfeature28","SURFfeature29","SURFfeature30","SURFfeature31","SURFfeature32","SURFfeature33","SURFfeature34",
"SURFfeature35","SURFfeature36","SURFfeature37","SURFfeature38","SURFfeature39","SURFfeature40","SURFfeature41",
"SURFfeature42","SURFfeature43","SURFfeature44","SURFfeature45","SURFfeature46","SURFfeature47","SURFfeature48",
"SURFfeature49","SURFfeature50","SURFfeature51","SURFfeature52","SURFfeature53","SURFfeature54","SURFfeature55",
"SURFfeature56","SURFfeature57","SURFfeature58","SURFfeature59","SURFfeature60","SURFfeature61","SURFfeature62",
"SURFfeature63","SURFfeature64","BRISKfeature1","BRISKfeature2","BRISKfeature3","BRISKfeature4","BRISKfeature5","BRISKfeature6","BRISKfeature7",
"BRISKfeature8","BRISKfeature9","BRISKfeature10","BRISKfeature11","BRISKfeature12","BRISKfeature13","BRISKfeature14","BRISKfeature15",
"BRISKfeature16","BRISKfeature17","BRISKfeature18","BRISKfeature19","BRISKfeature20","BRISKfeature21","BRISKfeature22","BRISKfeature23",
"BRISKfeature24","BRISKfeature25","BRISKfeature26","BRISKfeature27","BRISKfeature28","BRISKfeature29","BRISKfeature30","BRISKfeature31",
"BRISKfeature32","BRISKfeature33","BRISKfeature34","BRISKfeature35","BRISKfeature36","BRISKfeature37","BRISKfeature38","BRISKfeature39",
"BRISKfeature40","BRISKfeature41","BRISKfeature42","BRISKfeature43","BRISKfeature44","BRISKfeature45","BRISKfeature46","BRISKfeature47",
"BRISKfeature48","BRISKfeature49","BRISKfeature50","BRISKfeature51","BRISKfeature52","BRISKfeature53","BRISKfeature54","BRISKfeature55",
"BRISKfeature56","BRISKfeature57","BRISKfeature58","BRISKfeature59","BRISKfeature60","BRISKfeature61","BRISKfeature62","BRISKfeature63",
"BRISKfeature64")]
testData <- testData1[,c("X","Y","isLandmark","Distance","UP","DOWN","LEFT","RIGHT","SURFfeature1","SURFfeature2","SURFfeature3","SURFfeature4","SURFfeature5","SURFfeature6",
"SURFfeature7","SURFfeature8","SURFfeature9","SURFfeature10","SURFfeature11","SURFfeature12","SURFfeature13",
"SURFfeature14","SURFfeature15","SURFfeature16","SURFfeature17","SURFfeature18","SURFfeature19","SURFfeature20",
"SURFfeature21","SURFfeature22","SURFfeature23","SURFfeature24","SURFfeature25","SURFfeature26","SURFfeature27",
"SURFfeature28","SURFfeature29","SURFfeature30","SURFfeature31","SURFfeature32","SURFfeature33","SURFfeature34",
"SURFfeature35","SURFfeature36","SURFfeature37","SURFfeature38","SURFfeature39","SURFfeature40","SURFfeature41",
"SURFfeature42","SURFfeature43","SURFfeature44","SURFfeature45","SURFfeature46","SURFfeature47","SURFfeature48",
"SURFfeature49","SURFfeature50","SURFfeature51","SURFfeature52","SURFfeature53","SURFfeature54","SURFfeature55",
"SURFfeature56","SURFfeature57","SURFfeature58","SURFfeature59","SURFfeature60","SURFfeature61","SURFfeature62",
"SURFfeature63","SURFfeature64","BRISKfeature1","BRISKfeature2","BRISKfeature3","BRISKfeature4","BRISKfeature5","BRISKfeature6","BRISKfeature7",
"BRISKfeature8","BRISKfeature9","BRISKfeature10","BRISKfeature11","BRISKfeature12","BRISKfeature13","BRISKfeature14","BRISKfeature15",
"BRISKfeature16","BRISKfeature17","BRISKfeature18","BRISKfeature19","BRISKfeature20","BRISKfeature21","BRISKfeature22","BRISKfeature23",
"BRISKfeature24","BRISKfeature25","BRISKfeature26","BRISKfeature27","BRISKfeature28","BRISKfeature29","BRISKfeature30","BRISKfeature31",
"BRISKfeature32","BRISKfeature33","BRISKfeature34","BRISKfeature35","BRISKfeature36","BRISKfeature37","BRISKfeature38","BRISKfeature39",
"BRISKfeature40","BRISKfeature41","BRISKfeature42","BRISKfeature43","BRISKfeature44","BRISKfeature45","BRISKfeature46","BRISKfeature47",
"BRISKfeature48","BRISKfeature49","BRISKfeature50","BRISKfeature51","BRISKfeature52","BRISKfeature53","BRISKfeature54","BRISKfeature55",
"BRISKfeature56","BRISKfeature57","BRISKfeature58","BRISKfeature59","BRISKfeature60","BRISKfeature61","BRISKfeature62","BRISKfeature63",
"BRISKfeature64")]
class(trainData$isLandmark)
trainData$isLandmark <- as.factor(trainData$isLandmark)
#Prepare the formula
varNames <- names(trainData)
#Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("isLandmark")]
#Add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
#Add response variable and convert to a formula object
svm.form <- as.formula(paste("isLandmark", varNames1, sep ="~"))
svm.model <- svm(svm.form,kernel="radial", data=trainData)
print(svm.model)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
gamma.value <- c(10^seq(-4,0, by=1))
cost.value <-c(10^seq(-1,5, by=1))
svm.df <-data.frame()
for(g in gamma.value){
for(c in cost.value){
# train model
svm.model <- svm(svm.form,kernel="radial",
gamma=g,
cost=c,
data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
print("at value of gamma and cost = ")
print(g)
print(c)
#print(table.svm)
print(table1)
print("end")
}
}
svm.model <- svm(svm.form,kernel="radial",gamma=0.001,cost=0.1, data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
#plot test
trainData <- trainData1[,c("X","Y","isLandmark","HOGfeature1","HOGfeature2","HOGfeature3","HOGfeature4","HOGfeature5","HOGfeature6","HOGfeature7","HOGfeature8","HOGfeature9",
"HOGfeature10","HOGfeature11","HOGfeature12","HOGfeature13","HOGfeature14","HOGfeature15","HOGfeature16","HOGfeature17","HOGfeature18",
"HOGfeature19","HOGfeature20","HOGfeature21","HOGfeature22","HOGfeature23","HOGfeature24","HOGfeature25","HOGfeature26","HOGfeature27",
"HOGfeature28","HOGfeature29","HOGfeature30","HOGfeature31","HOGfeature32","HOGfeature33","HOGfeature34","HOGfeature35","HOGfeature36")]
testData <- testData1[,c("X","Y","isLandmark","HOGfeature1","HOGfeature2","HOGfeature3","HOGfeature4","HOGfeature5","HOGfeature6","HOGfeature7","HOGfeature8","HOGfeature9",
"HOGfeature10","HOGfeature11","HOGfeature12","HOGfeature13","HOGfeature14","HOGfeature15","HOGfeature16","HOGfeature17","HOGfeature18",
"HOGfeature19","HOGfeature20","HOGfeature21","HOGfeature22","HOGfeature23","HOGfeature24","HOGfeature25","HOGfeature26","HOGfeature27",
"HOGfeature28","HOGfeature29","HOGfeature30","HOGfeature31","HOGfeature32","HOGfeature33","HOGfeature34","HOGfeature35","HOGfeature36")]
class(trainData$isLandmark)
trainData$isLandmark <- as.factor(trainData$isLandmark)
#Prepare the formula
varNames <- names(trainData)
#Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("isLandmark")]
#Add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
#Add response variable and convert to a formula object
svm.form <- as.formula(paste("isLandmark", varNames1, sep ="~"))
svm.model <- svm(svm.form,kernel="radial", data=trainData)
print(svm.model)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
gamma.value <- c(10^seq(-4,0, by=1))
cost.value <-c(10^seq(-1,5, by=1))
svm.df <-data.frame()
for(g in gamma.value){
for(c in cost.value){
# train model
svm.model <- svm(svm.form,kernel="radial",
gamma=g,
cost=c,
data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
print("at value of gamma and cost = ")
print(g)
print(c)
#print(table.svm)
print(table1)
print("end")
}
}
svm.model <- svm(svm.form,kernel="radial",gamma=0.1,cost=0.1, data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
trainData <- trainData1[,c("X","Y","isLandmark","SURFfeature1","SURFfeature2","SURFfeature3","SURFfeature4","SURFfeature5","SURFfeature6",
"SURFfeature7","SURFfeature8","SURFfeature9","SURFfeature10","SURFfeature11","SURFfeature12","SURFfeature13",
"SURFfeature14","SURFfeature15","SURFfeature16","SURFfeature17","SURFfeature18","SURFfeature19","SURFfeature20",
"SURFfeature21","SURFfeature22","SURFfeature23","SURFfeature24","SURFfeature25","SURFfeature26","SURFfeature27",
"SURFfeature28","SURFfeature29","SURFfeature30","SURFfeature31","SURFfeature32","SURFfeature33","SURFfeature34",
"SURFfeature35","SURFfeature36","SURFfeature37","SURFfeature38","SURFfeature39","SURFfeature40","SURFfeature41",
"SURFfeature42","SURFfeature43","SURFfeature44","SURFfeature45","SURFfeature46","SURFfeature47","SURFfeature48",
"SURFfeature49","SURFfeature50","SURFfeature51","SURFfeature52","SURFfeature53","SURFfeature54","SURFfeature55",
"SURFfeature56","SURFfeature57","SURFfeature58","SURFfeature59","SURFfeature60","SURFfeature61","SURFfeature62",
"SURFfeature63","SURFfeature64")]
testData <- testData1[,c("X","Y","isLandmark","SURFfeature1","SURFfeature2","SURFfeature3","SURFfeature4","SURFfeature5","SURFfeature6",
"SURFfeature7","SURFfeature8","SURFfeature9","SURFfeature10","SURFfeature11","SURFfeature12","SURFfeature13",
"SURFfeature14","SURFfeature15","SURFfeature16","SURFfeature17","SURFfeature18","SURFfeature19","SURFfeature20",
"SURFfeature21","SURFfeature22","SURFfeature23","SURFfeature24","SURFfeature25","SURFfeature26","SURFfeature27",
"SURFfeature28","SURFfeature29","SURFfeature30","SURFfeature31","SURFfeature32","SURFfeature33","SURFfeature34",
"SURFfeature35","SURFfeature36","SURFfeature37","SURFfeature38","SURFfeature39","SURFfeature40","SURFfeature41",
"SURFfeature42","SURFfeature43","SURFfeature44","SURFfeature45","SURFfeature46","SURFfeature47","SURFfeature48",
"SURFfeature49","SURFfeature50","SURFfeature51","SURFfeature52","SURFfeature53","SURFfeature54","SURFfeature55",
"SURFfeature56","SURFfeature57","SURFfeature58","SURFfeature59","SURFfeature60","SURFfeature61","SURFfeature62",
"SURFfeature63","SURFfeature64")]
class(trainData$isLandmark)
trainData$isLandmark <- as.factor(trainData$isLandmark)
#Prepare the formula
varNames <- names(trainData)
#Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("isLandmark")]
#Add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
#Add response variable and convert to a formula object
svm.form <- as.formula(paste("isLandmark", varNames1, sep ="~"))
svm.model <- svm(svm.form,kernel="radial", data=trainData)
print(svm.model)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
gamma.value <- c(10^seq(-4,0, by=1))
cost.value <-c(10^seq(-1,5, by=1))
svm.df <-data.frame()
for(g in gamma.value){
for(c in cost.value){
# train model
svm.model <- svm(svm.form,kernel="radial",
gamma=g,
cost=c,
data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
print("at value of gamma and cost = ")
print(g)
print(c)
#print(table.svm)
print(table1)
print("end")
}
}
svm.model <- svm(svm.form,kernel="radial",gamma=0.001,cost=1, data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
trainData <- trainData1[,c("X","Y","isLandmark","FREAKfeature1","FREAKfeature2","FREAKfeature3","FREAKfeature4","FREAKfeature5","FREAKfeature6","FREAKfeature7","FREAKfeature8",
"FREAKfeature9","FREAKfeature10","FREAKfeature11","FREAKfeature12","FREAKfeature13","FREAKfeature14","FREAKfeature15",
"FREAKfeature16","FREAKfeature17","FREAKfeature18","FREAKfeature19","FREAKfeature20","FREAKfeature21","FREAKfeature22",
"FREAKfeature23","FREAKfeature24","FREAKfeature25","FREAKfeature26","FREAKfeature27","FREAKfeature28","FREAKfeature29",
"FREAKfeature30","FREAKfeature31","FREAKfeature32","FREAKfeature33","FREAKfeature34","FREAKfeature35","FREAKfeature36",
"FREAKfeature37","FREAKfeature38","FREAKfeature39","FREAKfeature40","FREAKfeature41","FREAKfeature42","FREAKfeature43",
"FREAKfeature44","FREAKfeature45","FREAKfeature46","FREAKfeature47","FREAKfeature48","FREAKfeature49","FREAKfeature50",
"FREAKfeature51","FREAKfeature52","FREAKfeature53","FREAKfeature54","FREAKfeature55","FREAKfeature56","FREAKfeature57",
"FREAKfeature58","FREAKfeature59","FREAKfeature60","FREAKfeature61","FREAKfeature62","FREAKfeature63","FREAKfeature64")]
testData <- testData1[,c("X","Y","isLandmark","FREAKfeature1","FREAKfeature2","FREAKfeature3","FREAKfeature4","FREAKfeature5","FREAKfeature6","FREAKfeature7","FREAKfeature8",
"FREAKfeature9","FREAKfeature10","FREAKfeature11","FREAKfeature12","FREAKfeature13","FREAKfeature14","FREAKfeature15",
"FREAKfeature16","FREAKfeature17","FREAKfeature18","FREAKfeature19","FREAKfeature20","FREAKfeature21","FREAKfeature22",
"FREAKfeature23","FREAKfeature24","FREAKfeature25","FREAKfeature26","FREAKfeature27","FREAKfeature28","FREAKfeature29",
"FREAKfeature30","FREAKfeature31","FREAKfeature32","FREAKfeature33","FREAKfeature34","FREAKfeature35","FREAKfeature36",
"FREAKfeature37","FREAKfeature38","FREAKfeature39","FREAKfeature40","FREAKfeature41","FREAKfeature42","FREAKfeature43",
"FREAKfeature44","FREAKfeature45","FREAKfeature46","FREAKfeature47","FREAKfeature48","FREAKfeature49","FREAKfeature50",
"FREAKfeature51","FREAKfeature52","FREAKfeature53","FREAKfeature54","FREAKfeature55","FREAKfeature56","FREAKfeature57",
"FREAKfeature58","FREAKfeature59","FREAKfeature60","FREAKfeature61","FREAKfeature62","FREAKfeature63","FREAKfeature64")]
class(trainData$isLandmark)
trainData$isLandmark <- as.factor(trainData$isLandmark)
#Prepare the formula
varNames <- names(trainData)
#Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("isLandmark")]
#Add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
#Add response variable and convert to a formula object
svm.form <- as.formula(paste("isLandmark", varNames1, sep ="~"))
svm.model <- svm(svm.form,kernel="radial", data=trainData)
print(svm.model)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
gamma.value <- c(10^seq(-4,0, by=1))
cost.value <-c(10^seq(-1,5, by=1))
svm.df <-data.frame()
for(g in gamma.value){
for(c in cost.value){
# train model
svm.model <- svm(svm.form,kernel="radial",
gamma=g,
cost=c,
data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
print("at value of gamma and cost = ")
print(g)
print(c)
#print(table.svm)
print(table1)
print("end")
}
}
svm.model <- svm(svm.form,kernel="radial",gamma=0.1,cost=0.1, data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
trainData <- trainData1[,c("X","Y","isLandmark","BRISKfeature1","BRISKfeature2","BRISKfeature3","BRISKfeature4","BRISKfeature5","BRISKfeature6","BRISKfeature7",
"BRISKfeature8","BRISKfeature9","BRISKfeature10","BRISKfeature11","BRISKfeature12","BRISKfeature13","BRISKfeature14","BRISKfeature15",
"BRISKfeature16","BRISKfeature17","BRISKfeature18","BRISKfeature19","BRISKfeature20","BRISKfeature21","BRISKfeature22","BRISKfeature23",
"BRISKfeature24","BRISKfeature25","BRISKfeature26","BRISKfeature27","BRISKfeature28","BRISKfeature29","BRISKfeature30","BRISKfeature31",
"BRISKfeature32","BRISKfeature33","BRISKfeature34","BRISKfeature35","BRISKfeature36","BRISKfeature37","BRISKfeature38","BRISKfeature39",
"BRISKfeature40","BRISKfeature41","BRISKfeature42","BRISKfeature43","BRISKfeature44","BRISKfeature45","BRISKfeature46","BRISKfeature47",
"BRISKfeature48","BRISKfeature49","BRISKfeature50","BRISKfeature51","BRISKfeature52","BRISKfeature53","BRISKfeature54","BRISKfeature55",
"BRISKfeature56","BRISKfeature57","BRISKfeature58","BRISKfeature59","BRISKfeature60","BRISKfeature61","BRISKfeature62","BRISKfeature63",
"BRISKfeature64")]
testData <- testData1[,c("X","Y","isLandmark","BRISKfeature1","BRISKfeature2","BRISKfeature3","BRISKfeature4","BRISKfeature5","BRISKfeature6","BRISKfeature7",
"BRISKfeature8","BRISKfeature9","BRISKfeature10","BRISKfeature11","BRISKfeature12","BRISKfeature13","BRISKfeature14","BRISKfeature15",
"BRISKfeature16","BRISKfeature17","BRISKfeature18","BRISKfeature19","BRISKfeature20","BRISKfeature21","BRISKfeature22","BRISKfeature23",
"BRISKfeature24","BRISKfeature25","BRISKfeature26","BRISKfeature27","BRISKfeature28","BRISKfeature29","BRISKfeature30","BRISKfeature31",
"BRISKfeature32","BRISKfeature33","BRISKfeature34","BRISKfeature35","BRISKfeature36","BRISKfeature37","BRISKfeature38","BRISKfeature39",
"BRISKfeature40","BRISKfeature41","BRISKfeature42","BRISKfeature43","BRISKfeature44","BRISKfeature45","BRISKfeature46","BRISKfeature47",
"BRISKfeature48","BRISKfeature49","BRISKfeature50","BRISKfeature51","BRISKfeature52","BRISKfeature53","BRISKfeature54","BRISKfeature55",
"BRISKfeature56","BRISKfeature57","BRISKfeature58","BRISKfeature59","BRISKfeature60","BRISKfeature61","BRISKfeature62","BRISKfeature63",
"BRISKfeature64")]
class(trainData$isLandmark)
trainData$isLandmark <- as.factor(trainData$isLandmark)
#Prepare the formula
varNames <- names(trainData)
#Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("isLandmark")]
#Add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
#Add response variable and convert to a formula object
svm.form <- as.formula(paste("isLandmark", varNames1, sep ="~"))
svm.model <- svm(svm.form,kernel="radial", data=trainData)
print(svm.model)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
gamma.value <- c(10^seq(-4,0, by=1))
cost.value <-c(10^seq(-1,5, by=1))
svm.df <-data.frame()
for(g in gamma.value){
for(c in cost.value){
# train model
svm.model <- svm(svm.form,kernel="radial",
gamma=g,
cost=c,
data=trainData)
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
print("at value of gamma and cost = ")
print(g)
print(c)
#print(table.svm)
print(table1)
print("end")
}
}
svm.model <- svm(svm.form,kernel="radial",gamma=0.1,cost=0.1, data=trainData)
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
#plot te
svm.model <- svm(svm.form,kernel="radial",gamma=0.1,cost=0.1, data=trainData)
svm.model
testData$Predicted_isLandmark <- predict(svm.model, testData[,-3])
table.svm <- table(pred = testData$Predicted_isLandmark ,
true = testData$isLandmark)/length(testData$isLandmark)
table1 <- table(testData$Predicted_isLandmark , testData$isLandmark)
# Create Confusion Matrix
confusionMatrix(data=factor(testData$Predicted_isLandmark), reference=factor(testData$isLandmark),positive='1')
#Calculate:
predicted_response = as.character(testData$Predicted_isLandmark)
predicted_response = as.numeric(predicted_response)
isLandmark = as.character(testData$isLandmark)
isLandmark = as.numeric(isLandmark)
retrieved <- sum(predicted_response)
precision <- sum(predicted_response & isLandmark) / retrieved
recall <- sum(predicted_response & isLandmark) / sum(isLandmark)
F1_score <- 2 * precision * recall / (precision + recall)
#check
precision
recall
F1_score
